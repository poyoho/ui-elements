import{a as e}from"./promise.2d7cfcc9.js";import{S as n}from"./resolvePackage.fdc5f42d.js";let r=1;class s{constructor(e,n){this.iframe=e,this.handlers=n,this.pending_cmds=new Map,this.handle_event=e=>this.handle_repl_message(e),window.addEventListener("message",this.handle_event,!1)}destroy(){window.removeEventListener("message",this.handle_event)}iframe_command(e,n){return new Promise(((s,o)=>{const t=r++;this.pending_cmds.set(t,{resolve:s,reject:o}),this.iframe.contentWindow.postMessage({action:e,cmd_id:t,args:n},"*")}))}handle_command_message(e){const n=e.action,r=e.cmd_id,s=this.pending_cmds.get(r);if(s){if(this.pending_cmds.delete(r),"cmd_error"===n){const{message:n,stack:r}=e,o=new Error(n);o.stack=r,s.reject(o)}"cmd_ok"===n&&s.resolve(e.args)}else console.error("command not found",r,e,[...this.pending_cmds.keys()])}handle_repl_message(e){if(e.source!==this.iframe.contentWindow)return;const{action:n,args:r}=e.data;switch(n){case"cmd_error":case"cmd_ok":return this.handle_command_message(e.data);case"fetch_progress":return this.handlers.on_fetch_progress&&this.handlers.on_fetch_progress(r.remaining);case"error":return this.handlers.on_error&&this.handlers.on_error(e.data);case"unhandledrejection":return this.handlers.on_unhandled_rejection&&this.handlers.on_unhandled_rejection(e.data);case"console":return this.handlers.on_console&&this.handlers.on_console(e.data);case"console_group":return this.handlers.on_console_group&&this.handlers.on_console_group(e.data);case"console_group_collapsed":return this.handlers.on_console_group_collapsed&&this.handlers.on_console_group_collapsed(e.data);case"console_group_end":return this.handlers.on_console_group_end&&this.handlers.on_console_group_end(e.data)}}eval(e){return this.iframe_command("eval",{script:e})}handle_links(){return this.iframe_command("catch_clicks",{})}}class o extends HTMLElement{constructor(){super(...arguments),this.importMaps={imports:{}},this.proxy=e()}get sandbox(){return this.shadowRoot.querySelector("iframe")}async connectedCallback(){const e=this.ownerDocument.createElement("iframe");e.style.width="inherit",e.style.height="inherit",e.style.border="0",e.style.outline="0",e.setAttribute("sandbox",["allow-forms","allow-modals","allow-pointer-lock","allow-popups","allow-same-origin","allow-scripts","allow-top-navigation-by-user-activation"].join(" "));const n=(e,n)=>{const r=this.ownerDocument.createEvent("Events");r.initEvent(e,!1,!1),r.data=n,this.dispatchEvent(r)},r=new s(e,{on_fetch_progress:e=>n("on_fetch_progress",e),on_error:e=>n("on_error",e),on_unhandled_rejection:e=>n("on_unhandled_rejection",e),on_console:e=>n("on_console",e),on_console_group:e=>n("on_console_group",e),on_console_group_collapsed:e=>n("on_console_group_collapsed",e),on_console_group_end:e=>n("on_console_group_end",e)});e.addEventListener("load",(()=>{r.handle_links(),this.proxy.resolve(r),console.log("[iframe-sandbox] sandbox load")}));const o=this.attachShadow({mode:"open"}),t=this.ownerDocument.createElement("div");t.style.width="inherit",t.style.height="inherit",t.appendChild(e),o.appendChild(t)}disconnectedCallback(){}setupDependency(e){const{sandbox:r}=this;for(const s in e)this.importMaps.imports[s]||(this.importMaps.imports[s]=n(s,e[s]));r.srcdoc="<!doctype html>\r\n<html>\r\n<head>\r\n<style>\r\n  body {\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\r\n      Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\r\n  }\r\n  html, body {\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n    background: #1e1e1e;\r\n    color: #e1e1e1;\r\n  }\r\n</style>\r\n<style id=\"__sfc-styles\"></style>\r\n\x3c!-- env --\x3e\r\n<script>\r\nif (window.indexedDB) delete window.indexedDB\r\nif (window.mozIndexedDB) delete window.mozIndexedDB\r\nif (window.webkitIndexedDB) delete window.webkitIndexedDB\r\nif (window.msIndexedDB) delete window.msIndexedDB\r\n// window.indexedDB = window.mozIndexedDB = window.webkitIndexedDB = window.msIndexedDB\r\nwindow.process = { env: {} }\r\n<\/script>\r\n\x3c!-- mock log --\x3e\r\n<script>\r\n  let previous = { level: null, args: null }\r\n\r\n;['clear', 'log', 'info', 'dir', 'warn', 'error', 'table'].forEach((level) => {\r\n  const original = console[level]\r\n  console[level] = (...args) => {\r\n    const msg = String(args[0])\r\n    if (\r\n      msg.includes('You are running a development build of Vue')\r\n      || msg.includes('You are running the esm-bundler build of Vue')\r\n    ) {\r\n      return\r\n    }\r\n\r\n    const stringifiedArgs = stringify(args)\r\n    if (previous.level === level && previous.args && previous.args === stringifiedArgs) {\r\n      parent.postMessage({ action: 'console', level, duplicate: true }, '*')\r\n    }\r\n    else {\r\n      previous = { level, args: stringifiedArgs }\r\n\r\n      try {\r\n        parent.postMessage({ action: 'console', level, args }, '*')\r\n      }\r\n      catch (err) {\r\n        parent.postMessage({\r\n          action: 'console',\r\n          level,\r\n          args: args.map((a) => {\r\n            return a instanceof Error ? a.message : String(a)\r\n          }),\r\n        }, '*')\r\n      }\r\n    }\r\n\r\n    original(...args)\r\n  }\r\n});\r\n\r\n[\r\n  { method: 'group', action: 'console_group' },\r\n  { method: 'groupEnd', action: 'console_group_end' },\r\n  { method: 'groupCollapsed', action: 'console_group_collapsed' },\r\n].forEach((group_action) => {\r\n  const original = console[group_action.method]\r\n  console[group_action.method] = (label) => {\r\n    parent.postMessage({ action: group_action.action, label }, '*')\r\n\r\n    original(label)\r\n  }\r\n})\r\n\r\nconst timers = new Map()\r\nconst original_time = console.time\r\nconst original_timelog = console.timeLog\r\nconst original_timeend = console.timeEnd\r\n\r\nconsole.time = (label = 'default') => {\r\n  original_time(label)\r\n  timers.set(label, performance.now())\r\n}\r\nconsole.timeLog = (label = 'default') => {\r\n  original_timelog(label)\r\n  const now = performance.now()\r\n  if (timers.has(label))\r\n    parent.postMessage({ action: 'console', level: 'system-log', args: [`${label}: ${now - timers.get(label)}ms`] }, '*')\r\n  else\r\n    parent.postMessage({ action: 'console', level: 'system-warn', args: [`Timer '${label}' does not exist`] }, '*')\r\n}\r\nconsole.timeEnd = (label = 'default') => {\r\n  original_timeend(label)\r\n  const now = performance.now()\r\n  if (timers.has(label))\r\n    parent.postMessage({ action: 'console', level: 'system-log', args: [`${label}: ${now - timers.get(label)}ms`] }, '*')\r\n  else\r\n    parent.postMessage({ action: 'console', level: 'system-warn', args: [`Timer '${label}' does not exist`] }, '*')\r\n\r\n  timers.delete(label)\r\n}\r\n\r\nconst original_assert = console.assert\r\nconsole.assert = (condition, ...args) => {\r\n  if (condition) {\r\n    const stack = new Error().stack // eslint-disable-line unicorn/error-message\r\n    parent.postMessage({ action: 'console', level: 'assert', args, stack }, '*')\r\n  }\r\n  original_assert(condition, ...args)\r\n}\r\n\r\nconst counter = new Map()\r\nconst original_count = console.count\r\nconst original_countreset = console.countReset\r\n\r\nconsole.count = (label = 'default') => {\r\n  counter.set(label, (counter.get(label) || 0) + 1)\r\n  parent.postMessage({ action: 'console', level: 'system-log', args: `${label}: ${counter.get(label)}` }, '*')\r\n  original_count(label)\r\n}\r\n\r\nconsole.countReset = (label = 'default') => {\r\n  if (counter.has(label))\r\n    counter.set(label, 0)\r\n  else\r\n    parent.postMessage({ action: 'console', level: 'system-warn', args: `Count for '${label}' does not exist` }, '*')\r\n\r\n  original_countreset(label)\r\n}\r\n\r\nconst original_trace = console.trace\r\n\r\nconsole.trace = (...args) => {\r\n  const stack = new Error().stack // eslint-disable-line unicorn/error-message\r\n  parent.postMessage({ action: 'console', level: 'trace', args, stack }, '*')\r\n  original_trace(...args)\r\n}\r\n\r\nfunction stringify(args) {\r\n  try {\r\n    return JSON.stringify(args)\r\n  }\r\n  catch (error) {\r\n    return null\r\n  }\r\n}\r\n<\/script>\r\n\x3c!-- bridge --\x3e\r\n<script>\r\nconst scriptEls = []\r\nasync function handle_message(ev) {\r\n  const { action, cmd_id } = ev.data\r\n  const send_message = payload => parent.postMessage({ ...payload }, ev.origin)\r\n  const send_reply = payload => send_message({ ...payload, cmd_id })\r\n  const send_ok = () => send_reply({ action: 'cmd_ok' })\r\n  const send_error = (message, stack) => send_reply({ action: 'cmd_error', message, stack })\r\n\r\n  if (action === 'eval') {\r\n    try {\r\n      if (scriptEls.length) {\r\n        scriptEls.forEach((el) => {\r\n          document.head.removeChild(el)\r\n        })\r\n        scriptEls.length = 0\r\n      }\r\n\r\n      let { script: scripts } = ev.data.args\r\n      if (typeof scripts === 'string') scripts = [scripts]\r\n\r\n      for (const script of scripts) {\r\n        const scriptEl = document.createElement('script')\r\n        scriptEl.setAttribute('type', 'module')\r\n        // send ok in the module script to ensure sequential evaluation\r\n        // of multiple proxy.eval() calls\r\n        const done = new Promise((resolve) => {\r\n          window.__next__ = resolve\r\n        })\r\n        scriptEl.innerHTML = `${script}\\nif(window.__next__){window.__next__()}`\r\n        document.head.appendChild(scriptEl)\r\n        scriptEl.onrror = err => send_error(err.message, err.stack)\r\n        scriptEls.push(scriptEl)\r\n        await done\r\n      }\r\n      window.__next__ = undefined\r\n      send_ok()\r\n    }\r\n    catch (e) {\r\n      send_error(e.message, e.stack)\r\n    }\r\n  } else if (action === 'catch_clicks') {\r\n    try {\r\n      const top_origin = ev.origin\r\n      document.body.addEventListener('click', (event) => {\r\n        if (event.which !== 1) return\r\n        if (event.metaKey || event.ctrlKey || event.shiftKey) return\r\n        if (event.defaultPrevented) return\r\n\r\n        // ensure target is a link\r\n        let el = event.target\r\n        while (el && el.nodeName !== 'A') el = el.parentNode\r\n        if (!el || el.nodeName !== 'A') return\r\n\r\n        if (el.hasAttribute('download') || el.getAttribute('rel') === 'external' || el.target) return\r\n\r\n        event.preventDefault()\r\n\r\n        if (el.href.startsWith(top_origin)) {\r\n          const url = new URL(el.href)\r\n          if (url.hash[0] === '#') {\r\n            window.location.hash = url.hash\r\n            return\r\n          }\r\n        }\r\n\r\n        window.open(el.href, '_blank')\r\n      })\r\n      send_ok()\r\n    }\r\n    catch (e) {\r\n      send_error(e.message, e.stack)\r\n    }\r\n  }\r\n}\r\n\r\nwindow.addEventListener('message', handle_message, false)\r\n\r\nwindow.onerror = function(msg, url, lineNo, columnNo, error) {\r\n  if (msg.includes('module specifier \"vue\"')) {\r\n    // firefox only error, ignore\r\n    return false\r\n  }\r\n  try {\r\n    parent.postMessage({ action: 'error', value: error }, '*')\r\n  }\r\n  catch (e) {\r\n    parent.postMessage({ action: 'error', value: msg }, '*')\r\n  }\r\n}\r\n\r\nwindow.addEventListener('unhandledrejection', (event) => {\r\n  if (event.reason.message.includes('Cross-origin')) {\r\n    event.preventDefault()\r\n    return\r\n  }\r\n  try {\r\n    parent.postMessage({ action: 'unhandledrejection', value: event.reason }, '*')\r\n  }\r\n  catch (e) {\r\n    parent.postMessage({ action: 'unhandledrejection', value: event.reason.message }, '*')\r\n  }\r\n})\r\n<\/script>\r\n\x3c!-- ES Module Shims: Import maps polyfill for modules browsers without import maps support (all except Chrome 89+) --\x3e\r\n<script async src=\"https://unpkg.com/es-module-shims@0.10.1/dist/es-module-shims.js\"><\/script>\r\n<script type=\"importmap\">\x3c!-- IMPORT_MAP --\x3e<\/script>\r\n</head>\r\n<body>\r\n  <div id=\"app\"></div>\r\n</body>\r\n</html>\r\n".replace("\x3c!-- IMPORT_MAP --\x3e",JSON.stringify(this.importMaps))}eval(e){this.proxy.promise.then((n=>{n.eval(e)}))}}function t(){window.customElements.get("iframe-sandbox")||(window.IframeSandbox=o,window.customElements.define("iframe-sandbox",o))}export{t as i};
